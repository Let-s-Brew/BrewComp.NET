@using System.ComponentModel.DataAnnotations
@using BlazorBootstrap

@inject ILogger<DateRangePicker> _logger

<div class="form-control">
    <h6>@(Title + ":")<span class="text-danger"> *</span></h6><hr />
    <div class="row row-cols-2 gx-3" >
        <div class="col">
           <label for="startDate" class="form-label">Start Date:</label>
           <input type="datetime-local" id="startDate" class="form-control" @bind-value=startDate @bind-value:event="oninput" @onchange="StartDateChanged" />

        </div>
        <div class="col">
            <label for="endDate" class="form-label">End Date:</label>
            <input type="datetime-local" id="endDate" class="form-control" @bind-value=endDate @bind-value:event="oninput" @onchange=EndDateChanged
                   min="@cutoff"  />
        </div>
    </div>
</div>

@code {
    [Parameter]
    public EditContext Context { get; set; } = null!;

    [Parameter]
    public string Title { get; set; } = null!;

    [Parameter]
    public DateRange Value { 
        get {
            DateTime start = startDate.ToUniversalTime();
            DateTime end = endDate.ToUniversalTime();
            if(_range.StartDate != start || _range.EndDate != end)
            {
                _logger.LogInformation($"Creating new DateRange: {start}-{end}");
                _range = new DateRange(start, end);
            }
            return _range;
        }
        set {
            if (_range == value) return;
            _range = value;
            ValueChanged.InvokeAsync(value);
        }
    }

    [Parameter]
    public EventCallback<DateRange> ValueChanged { get; set; }

    [Required]
    private DateTime startDate { get; set; } = DateTime.Now;
    [Required]
    private DateTime endDate { get; set; } = DateTime.Now.AddMonths(1);

    private DateRange _range = default!;
    private string cutoff => startDate.ToString("s");

    private void StartDateChanged(ChangeEventArgs args)
    {
        if(DateTime.TryParse(args?.Value?.ToString(), out var date))
        {
            startDate = date;

            if(endDate <= date ) // Moved starting date beyond what endDate was
            {
                if(endDate.TimeOfDay < date.TimeOfDay)
                {
                    //Need to move time forward to match new date's time
                    endDate = date;
                } else
                {
                    //Can leave time the same and just have to change the date
                    endDate = date.Date.Add(endDate.TimeOfDay);
                }
            }
            ValueChanged.InvokeAsync(this.Value);
        }
    }

    private void EndDateChanged(ChangeEventArgs args)
    {
        if (DateTime.TryParse(args?.Value?.ToString(), out var date))
        {
            endDate = date;
            if(endDate.Date == startDate.Date)
            {
                //now on same day, need to check times
                if(endDate.TimeOfDay <= startDate.TimeOfDay)
                {
                    // Match them up
                    endDate = startDate;
                }
            }
            ValueChanged.InvokeAsync(this.Value);
        }
    }
}

