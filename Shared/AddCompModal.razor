@using BlazorBootstrap
@using System.ComponentModel.DataAnnotations

@namespace BrewComp.Shared

@inject BrewCompDbContext dbContext
@inject ILogger<Program> _logger

<Modal @ref="modal" Title="Add New Competition" UseStaticBackdrop="true" IsScrollable="true" IsVerticallyCentered="true"
    Fullscreen="ModalFullscreen.LargeDown">
    <BodyTemplate>
        <EditForm EditContext="@editContext" OnValidSubmit="@HandleSubmit" id="addCompForm">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group row mb-3">
                <label class="col-form-label px-2">Competition Name: <span class="text-danger">*</span></label>
                <InputText class="form-control px-2" @bind-Value="formModel.CompName" />
            </div>
            <div class="form-group row mb-3">
                <DateRangePicker Title="Competition Dates" Context="@editContext" @bind-Value=formModel.CompDates Required="true" />
            </div>
            <div class="form-group row mb-3">
                <DateRangePicker Title="Registration Dates" Context="@editContext" @bind-Value=formModel.RegDates Required="true" />
            </div>
            <div class="form-group row mb-3">
                <DateRangePicker Title="Entry Registration/Modification Dates" Context="@editContext" @bind-Value=formModel.EntryDates Required="true" />
            </div>
            <div class="form-group row mb-3">
                <DateRangePicker Title="Shipping Window Dates" Context="@editContext" @bind-Value=formModel.ShipDates Required="true" />
            </div>
            <div class="form-group row mb-3">
                <DateRangePicker Title="Drop-Off Dates" Context="@editContext" @bind-Value=formModel.DropOffDates @ref=_picker Required="true"/>
                <label>
                    <InputCheckbox @oninput="UpdateShipDropWindow" ValueExpression="()=>formModel.ShipDropSame" />Use Same Dates as Shipping Window
                </label>
            </div>
        </EditForm>
    </BodyTemplate>
    <FooterTemplate>
        <Button Color="ButtonColor.Secondary" @onclick="CloseAsync">Cancel</Button>
        <Button Color="ButtonColor.Primary" Type="ButtonType.Submit" form="addCompForm">Save</Button>
       
    </FooterTemplate>
</Modal>

@code {
    private Modal modal = default!;
    protected AddCompForm formModel = new();
    private EditContext editContext = null!;
    private DateRangePicker _picker = null!;

    protected override void OnInitialized()
    {
        editContext = new(formModel);
    }

    private async Task HandleSubmit()
    {
        _logger.LogInformation($"CompName: {formModel.CompName}" );
        _logger.LogInformation($"CompDates: {formModel.CompDates}");

        /* Competition newComp = new Competition();

         await dbContext.Competitions.AddAsync(newComp);
         await dbContext.SaveChangesAsync(); */
        //await CloseAsync();
    }

    public async Task ShowAsync()
    {
        await modal.ShowAsync();
    }

    public async Task CloseAsync()
    {
        await modal.HideAsync();
    }

    private void UpdateShipDropWindow(ChangeEventArgs args)
    {
        _logger.LogInformation($"{args} / {args.Value}");
        _picker.Enabled = !((bool)args.Value);
    }

    public class AddCompForm
    {
        [Required(ErrorMessage = "Competition name is required")]
        //[StringLength(255, MinimumLength = 3, ErrorMessage = "Competition name must be between 3 and 255 Characters")]
        [RegularExpression(@"^[\w \-&!@$#,.]{3,254}$", ErrorMessage="Competition name must be between 3 and 254 Characters, containing only Letters, Numbers, Spaces, or these characters: !@#$,.-_")]
        internal string CompName { get; set; } = null!;

        [Required]
        internal DateRange CompDates { get; set; }
        [Required]
        internal DateRange RegDates { get; set; }
        [Required]
        internal DateRange EntryDates { get; set; }
        [Required]
        internal DateRange ShipDates { get; set; }
        internal DateRange DropOffDates { get; set; }

        internal bool ShipDropSame { get; set; } = false;
    }
}
