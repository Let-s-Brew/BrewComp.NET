@page "/Competitions"
@page "/Competition"
@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Identity
@using BrewComp.Identity

@inject BrewCompDbContext DBContext
@inject IDialogService DialogService
@inject ILogger<Competitions> Logger
@inject UserManager<BrewCompUser> UserManager

<MudStack Spacing=2>
    <div><h3>Competitions</h3></div>
    <MudDataGrid Items=@_data Filterable=true FilterCaseSensitivity=DataGridFilterCaseSensitivity.CaseInsensitive
        RowsPerPage="25" Striped=true Bordered=true HorizontalScrollbar=true Breakpoint="Breakpoint.None">
        <Columns>
            <HierarchyColumn T=Competition/>
            <TemplateColumn Title="Competition Name">
                <CellTemplate>
                    <MudLink Href="@($"/Competition/{context.Item.Id}")">@context.Item.Name</MudLink>
                </CellTemplate>
            </TemplateColumn>
            <PropertyColumn Property="c=>c.Entries.Count" Title="Entry Count">
                <CellTemplate>
                    @(context.Item.Entries.Count == 0 ? "None" : context.Item.Entries.Count)
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="c=> c.EntryLimit" Title="Entry Limit">
                <CellTemplate>
                    @(context.Item.EntryLimit == null || context.Item.EntryLimit <= 0 ? "No Entry Limit" : context.Item.EntryLimit)
                </CellTemplate>
            </PropertyColumn>
            <PropertyColumn Property="c=>c.EntryCost" Format="C"/>
            <TemplateColumn Title="Start Date">
                <CellTemplate>
                    @(context.Item.CompetitionDates.HasValue ? context.Item.CompetitionDates.Value.StartDate.ToString("yyyy-mm-dd") : "No Start Date Set")
                </CellTemplate>
            </TemplateColumn>
            <AuthorizeView Roles="siteadmin, coordinator">
                <TemplateColumn Filterable=false Sortable=false>
                    <HeaderTemplate Context=headerCell>
                        <MudMenu StartIcon="@Icons.Material.Outlined.AddCircle" Size="Size.Small" Color="Color.Info" 
                            Variant="Variant.Filled" Label="Add" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopCenter">
                            <MudMenuItem OnClick="ShowAddComp">Quick Add</MudMenuItem>
                            <MudMenuItem Href="/Competition/Add">Detailed Add</MudMenuItem>
                        </MudMenu>
                    </HeaderTemplate>
                    <CellTemplate Context=row>
                        @if(context.User.IsInRole("siteadmin") || context.User.HasClaim("Coordinator", row.Item.Id.ToString())) {
                            <MudStack Row>
                                <MudIconButton Icon="@Icons.Material.Outlined.DeleteForever" Color="Color.Error"
                                    OnClick="x=>RemoveComp(row.Item)"/>
                                <MudIconButton Icon="@Icons.Material.Outlined.Edit" Color="Color.Surface"
                                           Href=@($"/Competition/{row.Item.Id}/Edit") />
                            </MudStack>
                        }
                    </CellTemplate>
                </TemplateColumn>
            </AuthorizeView>
        </Columns>
        <ChildRowContent>
            <MudCard>
                <MudCardHeader>
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">@context.Item.Name</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    <div>Extra Comp Details will appear here</div>
                </MudCardContent>
            </MudCard>
        </ChildRowContent>
        <PagerContent>
            <MudDataGridPager T="Competition"/>
        </PagerContent>
    </MudDataGrid>
</MudStack>



@code {
    private ObservableCollection<Competition>? _data;

    [CascadingParameter]
    private Task<AuthenticationState>? authState { get; set; }

    protected override Task OnInitializedAsync()
    {
        _data = new ObservableCollection<Competition>(DBContext.Competitions.ToList());
        return base.OnInitializedAsync();
    }

    private async Task RemoveComp(Competition comp)
    {
        bool? result = await DialogService.ShowMessageBox(
            "Confirm Delete Competition", "All Competition data will be permentely deleted. This cannot be undone.",
            yesText: "Delete", cancelText: "Cancel");

        if (result == null || !result.Value) return;

        _data?.Remove(comp);
        DBContext.Remove(comp);
        await DBContext.SaveChangesAsync();
    }

    private async Task ShowAddComp()
    {
        var dialog = await DialogService.ShowAsync<AddCompModal>();
        var result = await dialog.Result;

        if(!result.Canceled)
        {
            var comp = (Competition)result.Data;
            _data?.Add(comp); // This should auto update our grid
            await DBContext.Competitions.AddAsync(comp);
            if(authState is not null)
            {
                var state = await authState;
                var user = state?.User;

                if(user?.Identity is not null && user.Identity.IsAuthenticated)
                {
                    var u = await this.UserManager.GetUserAsync(user);
                    await this.UserManager.AddClaimAsync(u, new System.Security.Claims.Claim("Coordinator", comp.Id.ToString()));
                }
            }
            await DBContext.SaveChangesAsync();

        }
    }

}
